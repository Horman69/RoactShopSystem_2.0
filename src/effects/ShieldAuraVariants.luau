--!strict
-- src/effects/ShieldAuraVariants.luau
-- –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã—Ö –∞—É—Ä –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —â–∏—Ç–∞

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local ShieldAuraVariants = {}

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞—É—Ä
local AURA_VARIANTS = {
	-- üõ°Ô∏è –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –ê–£–†–ê (—Ç–µ–∫—É—â–∞—è)
	classic = {
		name = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —â–∏—Ç",
		description = "–ü—Ä–æ—Å—Ç–∞—è –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è —Å—Ñ–µ—Ä–∞",
		performance = "–í—ã—Å–æ–∫–∞—è", -- –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
		shape = Enum.PartType.Ball,
		material = Enum.Material.Neon,
		size = Vector3.new(8, 8, 8),
		color = Color3.fromRGB(0, 170, 255),
		transparency = 0.6,
		effects = {"pulse", "glow", "rotation"}
	},
	
	-- ‚ö° –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ê–Ø –ê–£–†–ê
	energy = {
		name = "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä",
		description = "–ë—ã—Å—Ç—Ä–æ –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–±–æ–ª–æ—á–∫–∞",
		performance = "–í—ã—Å–æ–∫–∞—è",
		shape = Enum.PartType.Ball,
		material = Enum.Material.Neon,
		size = Vector3.new(7.5, 7.5, 7.5),
		color = Color3.fromRGB(0, 255, 150),
		transparency = 0.7,
		effects = {"fast_pulse", "spark_glow", "energy_rotation"}
	},
	
	-- üîÆ –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –ê–£–†–ê
	magic = {
		name = "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä",
		description = "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞ —Å —Ä—É–Ω–∞–º–∏",
		performance = "–°—Ä–µ–¥–Ω—è—è", -- –ß—É—Ç—å –±–æ–ª—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
		shape = Enum.PartType.Ball,
		material = Enum.Material.Neon,
		size = Vector3.new(8.5, 8.5, 8.5),
		color = Color3.fromRGB(150, 0, 255),
		transparency = 0.5,
		effects = {"magic_pulse", "runic_glow", "magic_particles"}
	},
	
	-- üåü –ó–í–ï–ó–î–ù–ê–Ø –ê–£–†–ê (—Å–∞–º–∞—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–∞—è)
	stellar = {
		name = "–ó–≤–µ–∑–¥–Ω—ã–π —â–∏—Ç",
		description = "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑–≤–µ–∑–¥",
		performance = "–°—Ä–µ–¥–Ω—è—è",
		shape = Enum.PartType.Ball,
		material = Enum.Material.Neon,
		size = Vector3.new(9, 9, 9),
		color = Color3.fromRGB(255, 215, 0),
		transparency = 0.8,
		effects = {"stellar_pulse", "star_glow", "cosmic_rotation", "particles"}
	},
	
	-- üî• –û–ì–ù–ï–ù–ù–ê–Ø –ê–£–†–ê
	fire = {
		name = "–û–≥–Ω–µ–Ω–Ω—ã–π –±–∞—Ä—å–µ—Ä",
		description = "–ü—ã–ª–∞—é—â–∞—è –∑–∞—â–∏—Ç–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞",
		performance = "–°—Ä–µ–¥–Ω—è—è",
		shape = Enum.PartType.Ball,
		material = Enum.Material.Neon,
		size = Vector3.new(8, 8, 8),
		color = Color3.fromRGB(255, 100, 0),
		transparency = 0.6,
		effects = {"fire_pulse", "flame_glow", "heat_distortion"}
	},
	
	-- ‚ùÑÔ∏è –õ–ï–î–Ø–ù–ê–Ø –ê–£–†–ê
	ice = {
		name = "–õ–µ–¥—è–Ω–æ–π –±–∞—Ä—å–µ—Ä",
		description = "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞",
		performance = "–í—ã—Å–æ–∫–∞—è",
		shape = Enum.PartType.Ball,
		material = Enum.Material.Ice,
		size = Vector3.new(8, 8, 8),
		color = Color3.fromRGB(173, 216, 230),
		transparency = 0.4,
		effects = {"ice_pulse", "crystal_glow", "frost_particles"}
	}
}

-- –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

-- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
function ShieldAuraVariants.createClassicPulse(shield: Part, config)
	local startTime = tick()
	local connection
	
	connection = RunService.Heartbeat:Connect(function()
		if not shield.Parent then
			connection:Disconnect()
			return
		end
		
		local elapsed = tick() - startTime
		local pulse = math.sin(elapsed * 3) * 0.3
		shield.Transparency = config.transparency + pulse
	end)
	
	return connection
end

-- –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è (–±—ã—Å—Ç—Ä–µ–µ)
function ShieldAuraVariants.createEnergyPulse(shield: Part, config)
	local startTime = tick()
	local connection
	
	connection = RunService.Heartbeat:Connect(function()
		if not shield.Parent then
			connection:Disconnect()
			return
		end
		
		local elapsed = tick() - startTime
		local pulse = math.sin(elapsed * 6) * 0.4
		shield.Transparency = config.transparency + pulse
		
		-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
		local sizePulse = math.sin(elapsed * 4) * 0.5
		shield.Size = config.size + Vector3.new(sizePulse, sizePulse, sizePulse)
	end)
	
	return connection
end

-- –ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
function ShieldAuraVariants.createMagicPulse(shield: Part, config)
	local startTime = tick()
	local connection
	
	connection = RunService.Heartbeat:Connect(function()
		if not shield.Parent then
			connection:Disconnect()
			return
		end
		
		local elapsed = tick() - startTime
		local pulse = math.sin(elapsed * 2) * 0.3
		shield.Transparency = config.transparency + pulse
		
		-- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
		local colorShift = math.sin(elapsed * 1.5) * 0.5 + 0.5
		shield.Color = Color3.fromRGB(
			math.floor(150 + colorShift * 105),
			math.floor(0 + colorShift * 100),
			255
		)
	end)
	
	return connection
end

-- –ó–≤–µ–∑–¥–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è (—Å–∞–º–∞—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–∞—è)
function ShieldAuraVariants.createStellarPulse(shield: Part, config)
	local startTime = tick()
	local connection
	
	connection = RunService.Heartbeat:Connect(function()
		if not shield.Parent then
			connection:Disconnect()
			return
		end
		
		local elapsed = tick() - startTime
		
		-- –°–ª–æ–∂–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–∞—Ä–º–æ–Ω–∏–∫–∞–º–∏
		local pulse1 = math.sin(elapsed * 2) * 0.2
		local pulse2 = math.sin(elapsed * 3.7) * 0.1
		local pulse3 = math.sin(elapsed * 5.3) * 0.1
		
		shield.Transparency = config.transparency + pulse1 + pulse2 + pulse3
		
		-- –ó–≤–µ–∑–¥–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
		local starGlow = math.sin(elapsed * 4) * 0.5 + 0.5
		shield.Color = Color3.fromRGB(
			255,
			math.floor(215 + starGlow * 40),
			math.floor(starGlow * 100)
		)
		
		-- –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
		shield.CFrame = shield.CFrame * CFrame.Angles(0.01, 0.02, 0.005)
	end)
	
	return connection
end

-- –°–æ–∑–¥–∞—Ç—å –∞—É—Ä—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
function ShieldAuraVariants.createVariantAura(variant: string, humanoidRootPart: Part): {shield: Part, connections: {RBXScriptConnection}}
	local config = AURA_VARIANTS[variant] or AURA_VARIANTS.classic
	
	-- –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ñ–µ—Ä—É
	local shield = Instance.new("Part")
	shield.Name = "ShieldAura_" .. variant
	shield.Shape = config.shape
	shield.Material = config.material
	shield.CanCollide = false
	shield.Anchored = true
	shield.Size = config.size
	shield.Color = config.color
	shield.Transparency = config.transparency
	shield.CFrame = humanoidRootPart.CFrame
	
	-- –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
	local pointLight = Instance.new("PointLight")
	pointLight.Color = config.color
	pointLight.Brightness = 2
	pointLight.Range = 12
	pointLight.Parent = shield
	
	local connections = {}
	
	-- –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
	if variant == "classic" then
		table.insert(connections, ShieldAuraVariants.createClassicPulse(shield, config))
	elseif variant == "energy" then
		table.insert(connections, ShieldAuraVariants.createEnergyPulse(shield, config))
	elseif variant == "magic" then
		table.insert(connections, ShieldAuraVariants.createMagicPulse(shield, config))
	elseif variant == "stellar" then
		table.insert(connections, ShieldAuraVariants.createStellarPulse(shield, config))
	else
		-- –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
		table.insert(connections, ShieldAuraVariants.createClassicPulse(shield, config))
	end
	
	-- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
	local positionConnection = RunService.Heartbeat:Connect(function()
		if not shield.Parent or not humanoidRootPart.Parent then
			for _, conn in ipairs(connections) do
				conn:Disconnect()
			end
			return
		end
		
		shield.CFrame = humanoidRootPart.CFrame
	end)
	
	table.insert(connections, positionConnection)
	
	shield.Parent = workspace
	
	return {
		shield = shield,
		connections = connections
	}
end

-- –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
function ShieldAuraVariants.getAvailableVariants(): {string}
	local variants = {}
	for variant, _ in pairs(AURA_VARIANTS) do
		table.insert(variants, variant)
	end
	return variants
end

-- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ
function ShieldAuraVariants.getVariantInfo(variant: string)
	return AURA_VARIANTS[variant]
end

return ShieldAuraVariants
