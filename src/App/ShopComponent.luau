--!strict
-- src/App/ShopComponent.luau
-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local ModuleLoader = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ModuleLoader"))
local Roact = ModuleLoader.require("Packages/roact")
local ShopService = ModuleLoader.require("services/ShopService")
local SimpleSoundService = ModuleLoader.require("services/SimpleSoundService")
local PlatformService = ModuleLoader.require("services/SimplePlatformService")
local ProductCard = ModuleLoader.require("App/ProductCard")

-- –¢–∏–ø—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local ShopConfig = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ShopConfig"))
local Types = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("Types"))
type Product = Types.Product

local ShopComponent = Roact.Component:extend("ShopComponent")

function ShopComponent:init()
	self.shopService = self.props.shopService or ShopService
	self.soundService = self.props.soundService or SimpleSoundService
	self.platformService = PlatformService
	
	self:setState({
		products = {}
	})
	
	self:updateProducts()
end

-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
function ShopComponent:updateProducts()
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	
	local availableProducts = self.shopService:getAvailableProducts(player)
	self:setState({
		products = availableProducts
	})
end

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
function ShopComponent:didUpdate(previousProps)
	if self.props.updateTrigger ~= previousProps.updateTrigger then
		self:updateProducts()
	end
end

-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–º
function ShopComponent:isProductOwned(product: Product): boolean
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	
	if product.category == "ability" and product.abilityId then
		return self.shopService.abilityService:isAbilityOwned(player, product.abilityId)
	end
	
	return false
end

-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ç–æ–≤–∞—Ä
function ShopComponent:canPlayerAfford(product: Product): boolean
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	
	return self.shopService.currencyService:hasEnoughCoins(player, product.price)
end

function ShopComponent:render()
	local products = self.state.products or {}
	local productElements = {}
	
	local isMobile = self.platformService:isMobile()
	local responsiveConfig = ShopConfig.getResponsiveConfig(isMobile)
	local cardDimensions = ShopConfig.getCardDimensions(isMobile)
	local screenSize = self.platformService:getScreenSize()
	
	-- –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	local containerConfig = responsiveConfig.container
	local containerWidth = isMobile and (screenSize.X * containerConfig.widthPercent) or containerConfig.width
	local containerHeight = isMobile and (screenSize.Y * containerConfig.heightPercent) or containerConfig.height
	
	-- –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	local abilities = {}
	local otherProducts = {}
	
	for _, product in ipairs(products) do
		if product.category == "ability" then
			table.insert(abilities, product)
		else
			table.insert(otherProducts, product)
		end
	end
	
	local currentY = 40 -- –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–ü–û–°–û–ë–ù–û–°–¢–ò"
	local cardSpacing = ShopConfig.design.spacing.gaps.medium
	
	-- –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if #abilities > 0 then
		-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–ü–û–°–û–ë–ù–û–°–¢–ò" —Å –∫—Ä–∞—Å–∏–≤–æ–π –æ–±–≤–æ–¥–∫–æ–π
		productElements["AbilitiesCategory"] = Roact.createElement("TextLabel", {
			Text = "–°–ü–û–°–û–ë–ù–û–°–¢–ò",
			Size = UDim2.new(1, -24, 0, 45), -- –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Å 35 –¥–æ 45
			Position = UDim2.new(0, 12, 0, currentY),
			BackgroundTransparency = 1,
			TextColor3 = ShopConfig.design.colors.text.primary,
			TextSize = 32, -- –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 24 –¥–æ 32
			Font = ShopConfig.design.colors.text.fonts.bold,
			TextXAlignment = Enum.TextXAlignment.Center,
			TextYAlignment = Enum.TextYAlignment.Center,
			-- –°—Ç–∏–ª—å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –∫–∞–∫ —É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
			TextStrokeTransparency = 0,
			TextStrokeColor3 = ShopConfig.design.colors.accent.primary,
		})
		
		currentY = currentY + 55 -- –£–≤–µ–ª–∏—á–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		
		for i, ability in ipairs(abilities) do
			local cardHeight = cardDimensions.height
			
			productElements["Ability" .. i] = Roact.createElement("Frame", {
				Size = UDim2.new(1, -24, 0, cardHeight),
				Position = UDim2.new(0, 12, 0, currentY),
				BackgroundTransparency = 1,
			}, {
				ProductCard = Roact.createElement(ProductCard, {
					product = ability,
					isOwned = self:isProductOwned(ability),
					canAfford = self:canPlayerAfford(ability),
					currentCoins = self.props.currentCoins or 0,
					onPurchase = function()
						if self.props.onPurchase then
							self.props.onPurchase(ability)
						end
					end,
				})
			})
			
			currentY = currentY + cardHeight + cardSpacing
		end
	end
	
	-- –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
	if #otherProducts > 0 then
		for i, product in ipairs(otherProducts) do
			local cardHeight = cardDimensions.height
			
			productElements["Product" .. i] = Roact.createElement("Frame", {
				Size = UDim2.new(1, -24, 0, cardHeight),
				Position = UDim2.new(0, 12, 0, currentY),
				BackgroundTransparency = 1,
			}, {
				ProductCard = Roact.createElement(ProductCard, {
					product = product,
					isOwned = self:isProductOwned(product),
					canAfford = self:canPlayerAfford(product),
					currentCoins = self.props.currentCoins or 0,
					onPurchase = function()
						if self.props.onPurchase then
							self.props.onPurchase(product)
						end
					end,
				})
			})
			
			currentY = currentY + cardHeight + cardSpacing
		end
	end
	
	local totalContentHeight = currentY + ShopConfig.design.spacing.gaps.medium
	
	-- –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å—Ç–∏–ª–µ –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	return Roact.createElement("Frame", {
		Size = UDim2.new(0, containerWidth, 0, containerHeight),
		Position = UDim2.new(0, 0, 0, 0),
		-- –¶–≤–µ—Ç–∞ –∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		BackgroundColor3 = ShopConfig.design.colors.background.secondary,
		BackgroundTransparency = 0.05,
		BorderSizePixel = 0,
		Visible = self.props.visible,
	}, {
		-- –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		UICorner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.container),
		}),
		
		-- –°—Ç–∏–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –∫–∞–∫ —É –∫–Ω–æ–ø–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		Border = Roact.createElement("UIStroke", {
			Color = ShopConfig.design.colors.accent.primary, -- –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç –∫–∞–∫ —É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
			Thickness = ShopConfig.design.stroke.thickness,
			Transparency = 0.3, -- –ú–µ–Ω–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		}),
		
		-- –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–Ω—å –∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		Shadow = Roact.createElement("Frame", {
			BackgroundColor3 = ShopConfig.design.shadow.color,
			BackgroundTransparency = ShopConfig.design.shadow.transparency,
			BorderSizePixel = 0,
			Size = UDim2.new(1, ShopConfig.design.shadow.offset.x * 2, 1, ShopConfig.design.shadow.offset.y * 2),
			Position = UDim2.new(0, -ShopConfig.design.shadow.offset.x, 0, ShopConfig.design.shadow.offset.y),
			ZIndex = -1,
		}, {
			Corner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.container + 3),
			}),
		}),
		
		-- –°—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –æ–±–≤–æ–¥–∫–æ–π
		Header = Roact.createElement("TextLabel", {
			Text = ShopConfig.shop.title,
			Size = UDim2.new(0.6, 0, 0, 40),
			Position = UDim2.new(0, 12, 0, 10),
			BackgroundTransparency = 1,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextSize = responsiveConfig.typography.header,
			Font = ShopConfig.design.colors.text.fonts.bold,
			TextColor3 = ShopConfig.design.colors.text.primary,
			-- –°—Ç–∏–ª—å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –Ω–∞ –∑–∞–≥–ª–∞–≤–Ω—É—é –Ω–∞–¥–ø–∏—Å—å
			TextStrokeTransparency = 0,
			TextStrokeColor3 = ShopConfig.design.colors.accent.primary,
		}),
		
		-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç —Å–æ —Å—Ç–∏–ª—å–Ω–æ–π —Ä–∞–º–∫–æ–π
		CoinBalanceContainer = Roact.createElement("Frame", {
			Size = UDim2.new(0, 120, 0, 32),
			Position = UDim2.new(1, -200, 0, 14), -- –°–¥–≤–∏–Ω—É–ª–∏ –ª–µ–≤–µ–µ —Å -170 –¥–æ -200
			BackgroundColor3 = ShopConfig.design.colors.background.card,
			BackgroundTransparency = 0,
			BorderSizePixel = 0,
		}, {
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 6),
			}),
			-- –°—Ç–∏–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –∫–∞–∫ —É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
			UIStroke = Roact.createElement("UIStroke", {
				Color = ShopConfig.design.colors.accent.primary, -- –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç
				Thickness = 2, -- –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–æ–ª—â–∏–Ω—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
				Transparency = 0, -- –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
			}),
			
			-- –¢–µ–∫—Å—Ç –±–∞–ª–∞–Ω—Å–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
			CoinBalance = Roact.createElement("TextLabel", {
				Text = "üí∞ " .. (self.props.currentCoins or 0),
				Size = UDim2.new(1, 0, 1, 0),
				Position = UDim2.new(0, 0, 0, 0),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.primary,
				TextSize = 16,
				Font = ShopConfig.design.colors.text.fonts.bold,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Center,
			}),
		}),
		
		-- –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
		CloseButton = Roact.createElement("TextButton", {
			Text = "√ó",
			Size = UDim2.new(0, 36, 0, 36),
			Position = UDim2.new(1, -48, 0, 12),
			BackgroundColor3 = ShopConfig.design.colors.button.close,
			BackgroundTransparency = 0,
			TextSize = 20,
			Font = ShopConfig.design.colors.text.fonts.bold,
			TextColor3 = ShopConfig.design.colors.text.button,
			AutoButtonColor = false,
			Modal = true,
			[Roact.Event.Activated] = function()
				if self.soundService then
					self.soundService:playShopClose()
				end
				
				if self.props.onClose then
					self.props.onClose()
				end
			end,
		}, {
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.button),
			}),
		}),
		
		-- –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
		ProductsList = Roact.createElement("ScrollingFrame", {
			Size = UDim2.new(1, -12, 1, -60),
			Position = UDim2.new(0, 6, 0, 54),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(0, 0, 0, totalContentHeight),
			ScrollBarThickness = isMobile and 6 or 8,
			ScrollBarImageColor3 = ShopConfig.design.colors.border.primary,
			ScrollBarImageTransparency = 0.4,
			ScrollingEnabled = true,
		}, productElements)
	})
end

return ShopComponent
