--!strict
-- src/App/ProductCard.luau
-- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
-- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local ModuleLoader = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ModuleLoader"))
local Roact = ModuleLoader.require("Packages/roact")
local PlatformService = ModuleLoader.require("services/SimplePlatformService")

-- –¢–∏–ø—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local Types = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("Types"))
local ShopConfig = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ShopConfig"))
type Product = Types.Product

-- –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export type ProductCardProps = {
	product: Product,
	isOwned: boolean?,
	canAfford: boolean?,
	onPurchase: (product: Product) -> (),
}

-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
local ProductCard = Roact.Component:extend("ProductCard")

function ProductCard:init()
	self.platformService = PlatformService.new()
	self.strokeRef = Roact.createRef() -- –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ–±–≤–æ–¥–∫—É
	self.cardRef = Roact.createRef() -- –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
	self.buttonRef = Roact.createRef() -- –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–Ω–æ–ø–∫–∏
end

-- –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function ProductCard:getCategoryColor(category: string?): Color3
	local categoryConfig = ShopConfig.getCategoryConfig(category or "other")
	return categoryConfig.color
end

-- –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
function ProductCard:getButtonState(): (string, Color3, boolean)
	local isOwned = self.props.isOwned or false
	local canAfford = self.props.canAfford or true
	
	if isOwned then
		return ShopConfig.shop.buttons.owned, ShopConfig.design.colors.button.owned, false
	elseif not canAfford then
		return ShopConfig.shop.buttons.cantAfford, ShopConfig.design.colors.button.cantAfford, false
	else
		return ShopConfig.shop.buttons.buy, ShopConfig.design.colors.button.buy, true
	end
end

-- –ü—Ä–æ—Å—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function ProductCard:onCardHover(isHovering: boolean)
	local card = self.cardRef.current
	if card then
		-- –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
		if isHovering then
			card.BackgroundColor3 = ShopConfig.design.colors.background.cardHover
		else
			card.BackgroundColor3 = ShopConfig.design.colors.background.card
		end
	end
end

function ProductCard:onButtonHover(isHovering: boolean)
	local button = self.buttonRef.current
	if button then
		-- –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
		button.BackgroundTransparency = isHovering and 0.1 or 0.0
	end
end

function ProductCard:onButtonPress()
	-- –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è - —Ç–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
end

function ProductCard:render()
	local product = self.props.product
	local isMobile = self.platformService:isMobile()
	
	-- –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
	local responsiveConfig = ShopConfig.getResponsiveConfig(isMobile)
	local cardDimensions = ShopConfig.getCardDimensions(isMobile)
	
	-- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	local categoryColor = self:getCategoryColor(product.category)
	local buttonText, buttonColor, buttonEnabled = self:getButtonState()
	
	-- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	local cardHeight = cardDimensions.height
	local spacing = cardDimensions.spacing
	local typography = responsiveConfig.typography
	local buttonWidth = isMobile and 85 or 95
	local buttonHeight = cardDimensions.buttonHeight
	
	return Roact.createElement("Frame", {
		Size = UDim2.new(1, 0, 0, cardHeight),
		BackgroundColor3 = ShopConfig.design.colors.background.card,
		BackgroundTransparency = 0,
		BorderSizePixel = 0,
		[Roact.Ref] = self.cardRef,
		
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
		[Roact.Event.MouseEnter] = function()
			self:onCardHover(true)
		end,
		[Roact.Event.MouseLeave] = function()
			self:onCardHover(false)
		end,
	}, {
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
		UICorner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.card),
		}),
		
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤–µ—Ç—è—â–∞—è—Å—è –æ–±–≤–æ–¥–∫–∞
		UIStroke = Roact.createElement("UIStroke", {
			Color = categoryColor,
			Thickness = ShopConfig.design.stroke.thickness,
			Transparency = 0.4,
			[Roact.Ref] = self.strokeRef,
		}),
		
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–Ω—å –¥–ª—è –≥–ª—É–±–∏–Ω—ã
		Shadow = Roact.createElement("Frame", {
			Size = UDim2.new(1, ShopConfig.design.shadow.offset.x * 2, 1, ShopConfig.design.shadow.offset.y * 2),
			Position = UDim2.new(0, ShopConfig.design.shadow.offset.x, 0, ShopConfig.design.shadow.offset.y),
			BackgroundColor3 = ShopConfig.design.shadow.color,
			BackgroundTransparency = ShopConfig.design.shadow.transparency,
			BorderSizePixel = 0,
			ZIndex = -1,
		}, {
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.card),
			}),
		}),
		
		-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
		ProductInfo = Roact.createElement("Frame", {
			Size = UDim2.new(1, -(buttonWidth + ShopConfig.design.spacing.padding.large), 1, -ShopConfig.design.spacing.gaps.large),
			Position = UDim2.new(0, ShopConfig.design.spacing.padding.large, 0, ShopConfig.design.spacing.gaps.medium),
			BackgroundTransparency = 1,
		}, {
			-- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞)
			ProductName = Roact.createElement("TextLabel", {
				Text = product.name,
				Size = UDim2.new(1, 0, 0, typography.title + 2),
				Position = UDim2.new(0, 0, 0, 2),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.primary,
				TextSize = typography.title,
				Font = ShopConfig.design.colors.text.fonts.bold,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
				TextTruncate = Enum.TextTruncate.AtEnd,
			}),
			
			-- –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (—Å –∑–æ–ª–æ—Ç—ã–º –∞–∫—Ü–µ–Ω—Ç–æ–º)
			ProductPrice = Roact.createElement("TextLabel", {
				Text = "üí∞ " .. product.price .. " –º–æ–Ω–µ—Ç",
				Size = UDim2.new(1, 0, 0, typography.price + 2),
				Position = UDim2.new(0, 0, 0, typography.title + ShopConfig.design.spacing.gaps.small),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.accent,
				TextSize = typography.price,
				Font = ShopConfig.design.colors.text.fonts.bold,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
			}),
			
			-- –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞)
			ProductDescription = Roact.createElement("TextLabel", {
				Text = product.description,
				Size = UDim2.new(1, 0, 0, typography.description + 8),
				Position = UDim2.new(0, 0, 0, typography.title + typography.price + ShopConfig.design.spacing.gaps.medium),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.secondary,
				TextSize = typography.description,
				Font = ShopConfig.design.colors.text.fonts.regular,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
				TextWrapped = true,
				TextTruncate = Enum.TextTruncate.AtEnd,
			}),
		}),
		
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
		PurchaseButton = Roact.createElement("TextButton", {
			Text = buttonText,
			Size = UDim2.new(0, buttonWidth, 0, buttonHeight),
			Position = UDim2.new(1, -(buttonWidth + ShopConfig.design.spacing.padding.medium), 0.5, -buttonHeight / 2),
			BackgroundColor3 = buttonColor,
			BackgroundTransparency = 0,
			BorderSizePixel = 0,
			Active = buttonEnabled,
			TextColor3 = ShopConfig.design.colors.text.button,
			TextSize = typography.button + 4, -- –£–≤–µ–ª–∏—á–∏–ª–∏ —à—Ä–∏—Ñ—Ç –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
			Font = ShopConfig.design.colors.text.fonts.bold,
			AutoButtonColor = false,
			Modal = true, -- –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–≤—É–∫–∏ Roblox
			[Roact.Ref] = self.buttonRef,
			
			-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏
			[Roact.Event.MouseEnter] = buttonEnabled and function()
				self:onButtonHover(true)
			end or nil,
			[Roact.Event.MouseLeave] = buttonEnabled and function()
				self:onButtonHover(false)
			end or nil,
			[Roact.Event.MouseButton1Down] = buttonEnabled and function()
				self:onButtonPress()
			end or nil,
			[Roact.Event.Activated] = buttonEnabled and function()
				self.props.onPurchase(product)
			end or nil,
		}, {
			-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.button),
			}),
			
			-- –°–≤–µ—Ç—è—â–∞—è—Å—è –æ–±–≤–æ–¥–∫–∞ –∫–Ω–æ–ø–∫–∏
			UIStroke = buttonEnabled and Roact.createElement("UIStroke", {
				Color = buttonColor,
				Thickness = ShopConfig.design.stroke.thickness,
				Transparency = 0.6,
			}) or nil,
		}),
	})
end

return ProductCard

