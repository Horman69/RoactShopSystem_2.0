--!strict
-- src/App/AbilityCard.luau
-- –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
-- –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∫—Ä—É–ø–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local ModuleLoader = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ModuleLoader"))
local Roact = ModuleLoader.require("Packages/roact")
local PlatformService = ModuleLoader.require("services/SimplePlatformService")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local ShopConfig = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ShopConfig"))

-- –¢–∏–ø—ã
local Types = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("Types"))
type Ability = Types.Ability

-- –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export type AbilityCardProps = {
	ability: Ability,
	isOwned: boolean?,
	canAfford: boolean?,
	onPurchase: (ability: Ability) -> (),
}

-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
local AbilityCard = Roact.Component:extend("AbilityCard")

function AbilityCard:init()
	self.platformService = PlatformService.new()
	self.buttonRef = Roact.createRef()
	self.strokeRef = Roact.createRef()
	
	-- –°–æ—Å—Ç–æ—è–Ω–∏–µ hover
	self:setState({
		isHovered = false,
	})
end

-- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏ –ø—Ä–∏ hover
function AbilityCard:onCardHover(isHovering: boolean)
	if self.platformService:isMobile() then return end
	
	self:setState({ isHovered = isHovering })
	
	if self.strokeRef.current then
		local colors = ShopConfig.design.colors
		local animations = ShopConfig.design.animations
		local hoverColor = isHovering and colors.button.buy or Color3.fromRGB(99, 102, 241)
		
		local tween = TweenService:Create(self.strokeRef.current,
			TweenInfo.new(animations.slow, animations.easing, animations.direction),
			{ Color = hoverColor }
		)
		tween:Play()
	end
end

-- –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
function AbilityCard:getButtonState(): (string, Color3, boolean)
	local isOwned = self.props.isOwned or false
	local canAfford = self.props.canAfford or true
	
	if isOwned then
		return "–ö–£–ü–õ–ï–ù–û", Color3.fromRGB(107, 114, 128), false -- –°–µ—Ä—ã–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
	elseif not canAfford then
		return "–ù–ï –•–í–ê–¢–ê–ï–¢", Color3.fromRGB(239, 68, 68), false -- –ö—Ä–∞—Å–Ω—ã–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
	else
		return "–ö–£–ü–ò–¢–¨", Color3.fromRGB(34, 197, 94), true -- –ó–µ–ª–µ–Ω—ã–π, –∞–∫—Ç–∏–≤–Ω–∞
	end
end

function AbilityCard:render()
	local ability = self.props.ability
	local isMobile = self.platformService:isMobile()
	
	-- –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	local config = ShopConfig.getResponsiveConfig(isMobile)
	local dimensions = ShopConfig.getCardDimensions(isMobile)
	local colors = ShopConfig.design.colors
	local animations = ShopConfig.design.animations
	
	-- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	local buttonText, buttonColor, buttonEnabled = self:getButtonState()
	
	-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	local cardHeight = dimensions.height
	local titleSize = config.typography.title
	local priceSize = config.typography.price
	local descSize = config.typography.description
	local buttonSize = isMobile and UDim2.new(0, 75, 0, dimensions.buttonHeight) or UDim2.new(0, 85, 0, dimensions.buttonHeight)
	
	return Roact.createElement("Frame", {
		Size = UDim2.new(1, 0, 0, cardHeight),
		BackgroundColor3 = colors.cardBackground,
		BackgroundTransparency = 0,  -- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω
		BorderSizePixel = 0,
		
		-- –°–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
		[Roact.Event.MouseEnter] = function()
			self:onCardHover(true)
		end,
		[Roact.Event.MouseLeave] = function()
			self:onCardHover(false)
		end,
	}, {
		-- –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ
		UICorner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.large), -- –ë–æ–ª—å—à–µ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
		}),
		
		-- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		UIGradient = Roact.createElement("UIGradient", {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, colors.cardBackground),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 25, 45)), -- –¢–µ–º–Ω–µ–µ —Å–Ω–∏–∑—É
			}),
			Rotation = 180,
		}),
		
		-- –°–≤–µ—Ç—è—â–∞—è—Å—è –æ–±–≤–æ–¥–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
		UIStroke = Roact.createElement("UIStroke", {
			Color = Color3.fromRGB(99, 102, 241), -- –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
			Thickness = 1,
			Transparency = 0.4,
			[Roact.Ref] = self.strokeRef,
		}),
		
		-- –¢–µ–Ω—å –¥–ª—è –≥–ª—É–±–∏–Ω—ã
		Shadow = Roact.createElement("Frame", {
			Size = UDim2.new(1, 6, 1, 8),
			Position = UDim2.new(0, 3, 0, 4),
			BackgroundColor3 = ShopConfig.design.colors.shadow,
			BackgroundTransparency = 0.85,
			BorderSizePixel = 0,
			ZIndex = -1,
		}, {
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, ShopConfig.design.borderRadius.large),
			}),
		}),
		
		-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
		AbilityInfo = Roact.createElement("Frame", {
			Size = UDim2.new(1, -100, 1, -config.spacing.gaps.medium), -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥
			Position = UDim2.new(0, config.spacing.padding.medium, 0, config.spacing.gaps.small),
			BackgroundTransparency = 1,
		}, {
			-- –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
			AbilityName = Roact.createElement("TextLabel", {
				Text = ability.name,
				Size = UDim2.new(1, 0, 0, titleSize + 2),
				Position = UDim2.new(0, 0, 0, 8),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.primary, -- –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ
				TextSize = titleSize,
				Font = Enum.Font.GothamBold,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Center,
				TextTruncate = Enum.TextTruncate.AtEnd,
			}),
			
			-- –¶–µ–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
			AbilityPrice = Roact.createElement("TextLabel", {
				Text = "üí∞ " .. ability.price .. " –º–æ–Ω–µ—Ç",
				Size = UDim2.new(1, 0, 0, priceSize + 2),
				Position = UDim2.new(0, 0, 0, titleSize + 10),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.accent, -- –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
				TextSize = priceSize,
				Font = Enum.Font.GothamBold,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Center,
			}),
			
			-- –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
			AbilityDescription = Roact.createElement("TextLabel", {
				Text = ability.description,
				Size = UDim2.new(1, 0, 0, descSize + 6),
				Position = UDim2.new(0, 0, 0, titleSize + priceSize + 15),
				BackgroundTransparency = 1,
				TextColor3 = ShopConfig.design.colors.text.secondary, -- –°–µ—Ä—ã–π –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
				TextSize = descSize,
				Font = Enum.Font.Gotham,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Center,
				TextWrapped = true,
				TextTruncate = Enum.TextTruncate.AtEnd,
			}),
		}),
		
		-- –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è —Å hover-–∞–Ω–∏–º–∞—Ü–∏–µ–π)
		PurchaseButton = Roact.createElement("TextButton", {
			Text = buttonText,
			Size = buttonSize,
			Position = UDim2.new(1, -buttonSize.X.Offset - 8, 0.5, -buttonSize.Y.Offset / 2),
			BackgroundColor3 = buttonColor,
			BackgroundTransparency = buttonEnabled and 0 or 0.3,
			BorderSizePixel = 0,
			TextColor3 = Color3.fromRGB(255, 255, 255), -- –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ -- –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è
			TextSize = isMobile and 12 or 13,
			Font = Enum.Font.GothamBold,
			AutoButtonColor = false,
			Modal = true, -- –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–≤—É–∫–∏ Roblox
			[Roact.Ref] = self.buttonRef,
			
			-- –°–æ–±—ã—Ç–∏–µ –ø–æ–∫—É–ø–∫–∏
			[Roact.Event.Activated] = buttonEnabled and function()
				if self.props.onPurchase then
					self.props.onPurchase(ability)
				end
			end or nil,
			
			-- –ü—Ä–æ—Å—Ç—ã–µ hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
			[Roact.Event.MouseEnter] = (not isMobile and buttonEnabled) and function(button)
				local hoverColor = Color3.fromRGB(
					math.min(255, buttonColor.R * 255 + 20),
					math.min(255, buttonColor.G * 255 + 20),
					math.min(255, buttonColor.B * 255 + 20)
				)
				
				local tween = TweenService:Create(button,
					TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
					{ BackgroundColor3 = hoverColor }
				)
				tween:Play()
			end or nil,
			
			[Roact.Event.MouseLeave] = (not isMobile and buttonEnabled) and function(button)
				local tween = TweenService:Create(button,
					TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
					{ BackgroundColor3 = buttonColor }
				)
				tween:Play()
			end or nil,
		}, {
			-- –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
			UICorner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 6),
			}),
		}),
	})
end

return AbilityCard
