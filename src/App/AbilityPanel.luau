--!strict
-- src/App/AbilityPanel.luau
-- –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local ModuleLoader = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ModuleLoader"))
local Roact = ModuleLoader.require("Packages/roact")
local AbilityService = ModuleLoader.require("services/AbilityService")
local SoundService = ModuleLoader.require("services/SoundService")

local AbilityPanel = Roact.Component:extend("AbilityPanel")

function AbilityPanel:init()
	self.abilityService = AbilityService.new()
	self.soundService = SoundService.new()
	
	-- –†–µ—Ñ—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
	self.buttonRefs = {}
	
	-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∑–≤—É–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
	self.previousCooldowns = {}
	
	self.state = {
		abilities = {},
		cooldowns = {},
		activeEffects = {},
		cooldownTimes = {},
		hoveredAbility = nil,
	}
	
	-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
	spawn(function()
		while true do
			wait(0.1)
			self:updateState()
		end
	end)
	
	-- –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
	spawn(function()
		wait(0.1) -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
		self:loadAbilities()
	end)
	
	-- –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		
		-- –ë–∞–∑–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID
		if input.KeyCode == Enum.KeyCode.Q then
			self:onAbilityActivate("speed_boost")
		elseif input.KeyCode == Enum.KeyCode.E then
			self:onAbilityActivate("shield_aura")
		elseif input.KeyCode == Enum.KeyCode.R then
			self:onAbilityActivate("jump_boost")
		-- –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
		-- elseif input.KeyCode == Enum.KeyCode.T then
		-- 	self:onAbilityActivate("strength_boost")
		-- elseif input.KeyCode == Enum.KeyCode.F then
		-- 	self:onAbilityActivate("invisibility")
		-- elseif input.KeyCode == Enum.KeyCode.G then
		-- 	self:onAbilityActivate("fire_aura")
		end
	end)
end

function AbilityPanel:loadAbilities()
	local player = Players.LocalPlayer
	if not player then return end
	
	local abilities = self.abilityService:getPlayerAbilities(player)
	self:setState({ abilities = abilities })
end

function AbilityPanel:updateState()
	local player = Players.LocalPlayer
	if not player then return end
	
	local cooldowns = {}
	local cooldownTimes = {}
	local activeEffects = self.abilityService:getActiveEffects(player)
	
	-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–¥–∞–∂–µ –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
	local baseAbilities = {"speed_boost", "shield_aura", "jump_boost"}
	
	for _, abilityId in ipairs(baseAbilities) do
		local isOnCooldown = self.abilityService:isAbilityOnCooldown(player, abilityId)
		local wasOnCooldown = self.previousCooldowns[abilityId] or false
		
		cooldowns[abilityId] = isOnCooldown
		
		-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∫—É–ª–¥–∞—É–Ω (–±—ã–ª –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç)
		if wasOnCooldown and not isOnCooldown then
			-- –ö—É–ª–¥–∞—É–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
			if self.soundService then
				self.soundService:playCooldownFinishedSound()
			end
			print("AbilityPanel: –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", abilityId, "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
		end
		
		if isOnCooldown then
			cooldownTimes[abilityId] = self.abilityService:getCooldownTimeLeft(player, abilityId)
		end
	end
	
	-- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –±—É–¥—É—â–µ–º)
	for _, ability in ipairs(self.state.abilities) do
		local isOnCooldown = self.abilityService:isAbilityOnCooldown(player, ability.id)
		local wasOnCooldown = self.previousCooldowns[ability.id] or false
		
		cooldowns[ability.id] = isOnCooldown
		
		-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞
		if wasOnCooldown and not isOnCooldown then
			if self.soundService then
				self.soundService:playCooldownFinishedSound()
			end
			print("AbilityPanel: –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", ability.id, "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
		end
		
		if isOnCooldown then
			cooldownTimes[ability.id] = self.abilityService:getCooldownTimeLeft(player, ability.id)
		end
	end
	
	-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	self.previousCooldowns = cooldowns
	
	self:setState({
		cooldowns = cooldowns,
		activeEffects = activeEffects,
		cooldownTimes = cooldownTimes,
	})
end

function AbilityPanel:activateAbilityByIndex(index: number)
	local abilities = self.state.abilities
	if abilities[index] then
		self:onAbilityActivate(abilities[index].id)
	end
end

function AbilityPanel:onAbilityActivate(abilityId: string)
	local player = Players.LocalPlayer
	if not player then return end
	
	local result = self.abilityService:activateAbility(player, abilityId)
	
	-- –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
	local buttonRef = self.buttonRefs[abilityId]
	local button = buttonRef and buttonRef:getValue()
	
	if result.success then
		-- –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
		if button then
			self:animateSuccess(button)
		end
		
		-- –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		spawn(function()
			wait(0.1)
			self:updateState()
		end)
	else
		-- –ù–µ—É–¥–∞—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –∑–≤—É–∫
		if button then
			-- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é –æ—à–∏–±–∫–∏, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ –Ω–µ—ë
		end
		
		-- –ù–µ—É–¥–∞—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if self.soundService then
			self.soundService:playAbilityCooldownSound()
		end
		
		-- –ö—Ä–∞—Ç–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if result.message:find("–Ω–µ—Ç —ç—Ç–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏") then
			game.StarterGui:SetCore("SendNotification", {
				Title = "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞!",
				Text = "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
				Duration = 3,
			})
		elseif result.message:find("–∫—É–ª–¥–∞—É–Ω–µ") then
			local timeLeft = math.ceil(self.abilityService:getCooldownTimeLeft(player, abilityId))
			game.StarterGui:SetCore("SendNotification", {
				Title = "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ!",
				Text = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ " .. timeLeft .. " —Å–µ–∫",
				Duration = 2,
			})
		end
	end
	
	-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	self:updateState()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover –¥–ª—è –∫–Ω–æ–ø–æ–∫
function AbilityPanel:animateHover(button: GuiObject)
	if not button then return end
	
	local tween = TweenService:Create(button, 
		TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Size = UDim2.new(0, 68, 0, 68)} -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 64 –¥–æ 68
	)
	tween:Play()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
function AbilityPanel:animateRelease(button: GuiObject)
	if not button then return end
	
	local tween = TweenService:Create(button, 
		TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Size = UDim2.new(0, 64, 0, 64)} -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 64
	)
	tween:Play()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
function AbilityPanel:animateSuccess(button: GuiObject)
	if not button then return end
	
	local originalColor = button.BackgroundColor3
	
	-- –ó–µ–ª–µ–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ
	local tween1 = TweenService:Create(button, 
		TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{BackgroundColor3 = Color3.fromRGB(0, 255, 100)}
	)
	
	tween1.Completed:Connect(function()
		local tween2 = TweenService:Create(button, 
			TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{BackgroundColor3 = originalColor}
		)
		tween2:Play()
	end)
	
	tween1:Play()
end

-- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è createProButton
function AbilityPanel:createSimpleButton(ability, index: number)
	local isOnCooldown = self.state.cooldowns[ability.id]
	local isActive = self.state.activeEffects[ability.id] ~= nil
	local cooldownTime = self.state.cooldownTimes[ability.id] or 0
	
	-- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
	local abilityConfig = {
		speed_boost = { icon = "‚ö°", color = Color3.fromRGB(0, 174, 255) },
		shield_aura = { icon = "üõ°", color = Color3.fromRGB(255, 149, 0) },
		jump_boost = { icon = "üöÄ", color = Color3.fromRGB(52, 199, 89) },
	}
	
	local config = abilityConfig[ability.id] or {
		icon = "?", color = Color3.fromRGB(100, 100, 255)
	}
	
	-- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –¶–í–ï–¢–û–í –ò –°–û–°–¢–û–Ø–ù–ò–ô
	local buttonColor, transparency, strokeColor, strokeThickness
	
	if isActive then
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ê–ö–¢–ò–í–ù–ê (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å) - —è—Ä–∫–∏–π —Å–≤–µ—Ç—è—â–∏–π—Å—è —Ü–≤–µ—Ç
		buttonColor = Color3.new(
			math.min(1, config.color.R * 1.5), 
			math.min(1, config.color.G * 1.5), 
			math.min(1, config.color.B * 1.5)
		)
		transparency = 0 -- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(255, 255, 255) -- –ë–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 2
	elseif isOnCooldown then
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –ö–£–õ–î–ê–£–ù–ï - —Ç–µ–º–Ω–∞—è, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
		buttonColor = Color3.fromRGB(60, 30, 30) -- –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–∞—è
		transparency = 0.3 -- –°–ª–µ–≥–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(120, 60, 60) -- –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 1
	else
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ - –æ–±—ã—á–Ω—ã–π —è—Ä–∫–∏–π —Ü–≤–µ—Ç
		buttonColor = config.color
		transparency = 0 -- –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(80, 80, 80) -- –°–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 1
	end
	
	-- –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò
	local hotkey = ""
	if ability.id == "speed_boost" then hotkey = "Q"
	elseif ability.id == "shield_aura" then hotkey = "E" 
	elseif ability.id == "jump_boost" then hotkey = "R" end
	
	-- –°–æ–∑–¥–∞–µ–º ref –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
	if not self.buttonRefs[ability.id] then
		self.buttonRefs[ability.id] = Roact.createRef()
	end
	
	-- –û–ë–´–ß–ù–ê–Ø –ö–ù–û–ü–ö–ê –° –ü–†–û–°–¢–´–ú–ò –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò (–ë–ï–ó –õ–ò–®–ù–ï–ì–û FRAME)
	return Roact.createElement("TextButton", {
		[Roact.Ref] = self.buttonRefs[ability.id],
		BackgroundColor3 = buttonColor,
		BackgroundTransparency = transparency,
		BorderSizePixel = 0,
		Size = UDim2.new(0, 64, 0, 64),
		Position = UDim2.new(0, (index - 1) * 72, 0, 0),
		Text = "",
		AutoButtonColor = false,
		[Roact.Event.Activated] = function()
			-- –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º onAbilityActivate - –∑–≤—É–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
			self:onAbilityActivate(ability.id)
		end,
		[Roact.Event.MouseEnter] = function()
			-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover
			local button = self.buttonRefs[ability.id]:getValue()
			if button then
				self:animateHover(button)
			end
		end,
		[Roact.Event.MouseLeave] = function()
			-- –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
			local button = self.buttonRefs[ability.id]:getValue()
			if button then
				self:animateRelease(button)
			end
		end,
	}, {
		-- –°–ö–†–£–ì–õ–ï–ù–ò–ï
		Corner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, 12),
		}),
		
		-- –û–ë–í–û–î–ö–ê –î–õ–Ø –ò–ù–î–ò–ö–ê–¶–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø
		Stroke = Roact.createElement("UIStroke", {
			Color = strokeColor,
			Thickness = strokeThickness,
			Transparency = 0.3,
		}),
		
		-- –ò–ö–û–ù–ö–ê –°–ü–û–°–û–ë–ù–û–°–¢–ò (–¶–ï–ù–¢–†) - —Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
		Icon = Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.6, 0, 0.6, 0),
			Position = UDim2.new(0.2, 0, 0.1, 0),
			Text = config.icon,
			TextColor3 = isOnCooldown and Color3.fromRGB(150, 150, 150) or Color3.fromRGB(255, 255, 255),
			TextTransparency = isOnCooldown and 0.5 or 0,
			TextScaled = true,
			Font = Enum.Font.GothamBold,
		}),
		
		-- –ì–û–†–Ø–ß–ê–Ø –ö–õ–ê–í–ò–®–ê (–ü–†–ê–í–´–ô –í–ï–†–•–ù–ò–ô –£–ì–û–õ)
		Hotkey = Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.3, 0, 0.25, 0),
			Position = UDim2.new(0.7, 0, 0.05, 0),
			Text = hotkey,
			TextColor3 = isOnCooldown and Color3.fromRGB(150, 150, 150) or Color3.fromRGB(255, 255, 255),
			TextTransparency = isOnCooldown and 0.5 or 0,
			TextSize = 12,
			Font = Enum.Font.GothamBold,
		}),
		
		-- –¢–ê–ô–ú–ï–† –ö–£–õ–î–ê–£–ù–ê (–¶–ï–ù–¢–†, –ü–û–í–ï–†–• –ò–ö–û–ù–ö–ò)
		Timer = isOnCooldown and Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.8, 0, 0.4, 0),
			Position = UDim2.new(0.1, 0, 0.4, 0),
			Text = tostring(math.ceil(cooldownTime)),
			TextColor3 = Color3.fromRGB(255, 100, 100), -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
			TextSize = 16,
			Font = Enum.Font.GothamBold,
			TextStrokeTransparency = 0,
			TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
			ZIndex = 5,
		}) or nil,
		
		-- –ò–ù–î–ò–ö–ê–¢–û–† –ê–ö–¢–ò–í–ù–û–°–¢–ò (–µ—Å–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞)
		ActiveIndicator = isActive and Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.4, 0, 0.3, 0),
			Position = UDim2.new(0.3, 0, 0.65, 0),
			Text = "ON",
			TextColor3 = Color3.fromRGB(0, 255, 100), -- –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
			TextSize = 10,
			Font = Enum.Font.GothamBold,
			TextStrokeTransparency = 0,
			TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
			ZIndex = 5,
		}) or nil,
	})
end

-- –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function AbilityPanel:createEmptySlot(slot, index: number)
	local hotkey = slot.hotkey or "?"
	
	-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (–¥–∞–∂–µ –¥–ª—è –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π)
	local isOnCooldown = self.state.cooldowns[slot.abilityId] or false
	local cooldownTime = self.state.cooldownTimes[slot.abilityId] or 0
	
	-- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
	local backgroundColor, strokeColor, strokeThickness
	
	if isOnCooldown then
		-- –ù–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–æ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ)
		backgroundColor = Color3.fromRGB(80, 40, 40)
		strokeColor = Color3.fromRGB(120, 60, 60)
		strokeThickness = 2
	else
		-- –û–±—ã—á–Ω—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç (–Ω–µ –∫—É–ø–ª–µ–Ω–∞)
		backgroundColor = Color3.fromRGB(40, 40, 40)
		strokeColor = Color3.fromRGB(80, 80, 80)
		strokeThickness = 1
	end
	
	-- –°–æ–∑–¥–∞–µ–º ref –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
	if not self.buttonRefs[slot.abilityId] then
		self.buttonRefs[slot.abilityId] = Roact.createRef()
	end
	
	return Roact.createElement("TextButton", {
		[Roact.Ref] = self.buttonRefs[slot.abilityId],
		BackgroundColor3 = backgroundColor,
		BackgroundTransparency = 0.2, -- –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
		BorderSizePixel = 0,
		Size = UDim2.new(0, 64, 0, 64),
		Position = UDim2.new(0, (index - 1) * 72, 0, 0),
		Text = "", -- –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
		AutoButtonColor = false,
		[Roact.Event.Activated] = function()
			-- –í—ã–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é - –∑–≤—É–∫ –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
			self:onAbilityActivate(slot.abilityId)
		end,
		[Roact.Event.MouseEnter] = function()
			-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
			local button = self.buttonRefs[slot.abilityId]:getValue()
			if button then
				self:animateHover(button)
			end
		end,
		[Roact.Event.MouseLeave] = function()
			local button = self.buttonRefs[slot.abilityId]:getValue()
			if button then
				self:animateRelease(button)
			end
		end,
	}, {
		-- –°–∫—Ä—É–≥–ª–µ–Ω–∏—è
		Corner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, 12),
		}),
		
		-- –û–±–≤–æ–¥–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
		Stroke = Roact.createElement("UIStroke", {
			Color = strokeColor,
			Thickness = strokeThickness,
			Transparency = 0.5,
		}),
		
		-- –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ü–µ–Ω—Ç—Ä)
		Icon = Roact.createElement("TextLabel", {
			Text = slot.icon,
			TextColor3 = Color3.fromRGB(150, 150, 150),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.6, 0, 0.6, 0),
			Position = UDim2.new(0.2, 0, 0.1, 0),
			TextScaled = true,
		}),
		
		-- –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
		Hotkey = Roact.createElement("TextLabel", {
			Text = hotkey,
			TextColor3 = Color3.fromRGB(150, 150, 150),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.3, 0, 0.25, 0),
			Position = UDim2.new(0.7, 0, 0.05, 0),
			TextSize = 12,
		}),
		
		-- –ó–∞–º–æ–∫ (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ)
		LockIcon = not isOnCooldown and Roact.createElement("TextLabel", {
			Text = "üîí",
			TextColor3 = Color3.fromRGB(120, 120, 120),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.3, 0, 0.3, 0),
			Position = UDim2.new(0.35, 0, 0.6, 0),
			TextScaled = true,
		}) or nil,
		
		-- –¢–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
		Timer = isOnCooldown and Roact.createElement("TextLabel", {
			Text = tostring(math.ceil(cooldownTime)),
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.8, 0, 0.4, 0),
			Position = UDim2.new(0.1, 0, 0.4, 0),
			TextSize = 16,
			TextStrokeTransparency = 0,
			TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
			ZIndex = 5,
		}) or nil,
	})
end

-- –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
function AbilityPanel:didUpdate(prevProps)
	if self.props.updateTrigger and prevProps.updateTrigger ~= self.props.updateTrigger then
		-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
		spawn(function()
			wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
			self:loadAbilities()
			print("AbilityPanel: –û–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
		end)
	end
end

function AbilityPanel:render()
	local abilities = self.state.abilities
	
	-- –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —Å–ª–æ—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (Q, E, R)
	local baseAbilitySlots = {
		{hotkey = "Q", abilityId = "speed_boost", icon = "‚ö°", name = "–£—Å–∫–æ—Ä–µ–Ω–∏–µ"},
		{hotkey = "E", abilityId = "shield_aura", icon = "üõ°", name = "–©–∏—Ç"},
		{hotkey = "R", abilityId = "jump_boost", icon = "üöÄ", name = "–ü—Ä—ã–∂–æ–∫"},
	}
	
	local buttonSize = 64
	local spacing = 72  -- –û–±—â–∏–π spacing (64 —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ + 8 –æ—Ç—Å—Ç—É–ø)
	local totalWidth = (#baseAbilitySlots - 1) * spacing + buttonSize  -- –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –±–µ–∑ spacing
	local totalHeight = buttonSize
	
	local abilityButtons = {}
	for i, slot in ipairs(baseAbilitySlots) do
		-- –ò—â–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
		local ownedAbility = nil
		for _, ability in ipairs(abilities) do
			if ability.id == slot.abilityId then
				ownedAbility = ability
				break
			end
		end
		
		if ownedAbility then
			-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫—É–ø–ª–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
			abilityButtons["Ability" .. i] = self:createSimpleButton(ownedAbility, i)
		else
			-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
			abilityButtons["Ability" .. i] = self:createEmptySlot(slot, i)
		end
	end
	
	return Roact.createElement("ScreenGui", {
		Name = "AbilityPanel",
		ResetOnSpawn = false,
	}, {
		-- –û–ë–´–ß–ù–ê–Ø –ü–ê–ù–ï–õ–¨ (–ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ò)
		MainBar = Roact.createElement("Frame", {
			BackgroundColor3 = Color3.fromRGB(28, 28, 30), -- –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π Apple style
			BackgroundTransparency = 0.05, -- –ü–æ—á—Ç–∏ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
			BorderSizePixel = 0,
			Size = UDim2.new(0, totalWidth + 16, 0, totalHeight + 16),
			Position = UDim2.new(0.5, -(totalWidth + 16) / 2, 1, -totalHeight - 32),
		}, {
			-- –°–û–í–†–ï–ú–ï–ù–ù–û–ï –°–ö–†–£–ì–õ–ï–ù–ò–ï
			Corner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 16),
			}),
			
			-- –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ù–¨ –ü–ê–ù–ï–õ–ò
			Shadow = Roact.createElement("Frame", {
				BackgroundColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 0.8,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 6, 1, 6),
				Position = UDim2.new(0, -3, 0, 3),
				ZIndex = -1,
			}, {
				Corner = Roact.createElement("UICorner", {
					CornerRadius = UDim.new(0, 19),
				}),
			}),
			
			-- –¢–û–ù–ö–ê–Ø –†–ê–ú–ö–ê (–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û)
			Border = Roact.createElement("UIStroke", {
				Color = Color3.fromRGB(60, 60, 60),
				Thickness = 1,
				Transparency = 0.5,
			}),
			
			-- –ö–û–ù–¢–ï–ô–ù–ï–† –ö–ù–û–ü–û–ö
			ButtonContainer = Roact.createElement("Frame", {
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -16, 1, -16),
				Position = UDim2.new(0, 8, 0, 8),
			}, abilityButtons),
		}),
	})
end

return AbilityPanel
