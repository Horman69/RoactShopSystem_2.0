--!strict
-- src/App/AbilityPanel.luau
-- –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local ModuleLoader = require(ReplicatedStorage:WaitForChild("shared"):WaitForChild("ModuleLoader"))
local Roact = ModuleLoader.require("Packages/roact")
local AbilityService = ModuleLoader.require("services/AbilityService")
local SimpleSoundService = ModuleLoader.require("services/SimpleSoundService")
local PlatformService = ModuleLoader.require("services/SimplePlatformService")
local AbilityConfig = ModuleLoader.require("shared/AbilityConfig") -- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
local ShopConfig = ModuleLoader.require("shared/ShopConfig") -- –ò–º–ø–æ—Ä—Ç –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π

local AbilityPanel = Roact.Component:extend("AbilityPanel")

function AbilityPanel:init()
	-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	local success, error = pcall(function()
		self.abilityService = AbilityService.new()
		self.soundService = SimpleSoundService.new()
		self.platformService = PlatformService.new()
	end)
	
	if not success then
		warn("AbilityPanel: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:", error)
		-- –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
		self.abilityService = { 
			getActiveEffects = function() return {} end,
			isAbilityUnavailableForUI = function() return false end,
			getUITimeLeft = function() return 0 end,
			activateAbility = function() return {success = false, message = "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"} end
		}
		self.soundService = { playSound = function() end }
		self.platformService = { isMobile = function() return false end }
	end
	
	-- –†–µ—Ñ—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
	self.buttonRefs = {}
	
	-- –†–µ—Ñ—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
	self.progressRefs = {}
	
	-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∑–≤—É–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
	self.previousCooldowns = {}
	
	-- –î–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
	self.isUpdating = false
	self.lastUpdateTime = 0
	
	self.state = {
		abilities = {},
		cooldowns = {},
		activeEffects = {},
		cooldownTimes = {},
		effectTimes = {}, -- –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
		hoveredAbility = nil,
	}
	
	-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä!)
	self.updateConnection = nil
	self:startOptimizedUpdates()
	
	-- –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	spawn(function()
		wait(0.1) -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
		self:loadAbilities()
		
		-- –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º previousCooldowns –ø—Ä–∞–≤–∏–ª—å–Ω–æ
		self:initializePreviousCooldowns()
		
		-- –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		wait(0.1) -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
		self:updateState()
		print("üîÑ AbilityPanel: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
	end)
	
	-- –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		
		-- –ë–∞–∑–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID
		if input.KeyCode == Enum.KeyCode.Q then
			self:onAbilityActivate("speed_boost")
		elseif input.KeyCode == Enum.KeyCode.E then
			self:onAbilityActivate("shield_aura")
		elseif input.KeyCode == Enum.KeyCode.R then
			self:onAbilityActivate("jump_boost")
		-- –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
		-- elseif input.KeyCode == Enum.KeyCode.T then
		-- 	self:onAbilityActivate("strength_boost")
		-- elseif input.KeyCode == Enum.KeyCode.F then
		-- 	self:onAbilityActivate("invisibility")
		-- elseif input.KeyCode == Enum.KeyCode.G then
		-- 	self:onAbilityActivate("fire_aura")
		end
	end)
end

function AbilityPanel:initializePreviousCooldowns()
	local player = Players.LocalPlayer
	if not player then return end
	
	local initialCooldowns = {}
	
	-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	local baseAbilities = {"speed_boost", "shield_aura", "jump_boost"}
	for _, abilityId in ipairs(baseAbilities) do
		initialCooldowns[abilityId] = self.abilityService:isAbilityUnavailableForUI(player, abilityId)
	end
	
	-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	for _, ability in ipairs(self.state.abilities) do
		initialCooldowns[ability.id] = self.abilityService:isAbilityUnavailableForUI(player, ability.id)
	end
	
	self.previousCooldowns = initialCooldowns
	print("üîÑ AbilityPanel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–æ–≤:", initialCooldowns)
end

function AbilityPanel:loadAbilities()
	local player = Players.LocalPlayer
	if not player then return end
	
	local abilities = self.abilityService:getPlayerAbilities(player)
	self:setState({ abilities = abilities })
end

-- –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∞ Heartbeat)
function AbilityPanel:startOptimizedUpdates()
	-- –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	spawn(function()
		local idleCounter = 0 -- –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
		
		while self.updateConnection ~= false do -- –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
			wait(0.1) -- –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
			
			if self.updateConnection == false then break end
			
			local player = Players.LocalPlayer
			if not player then continue end
			
			-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
			local needsUpdate = self:checkIfUpdateNeeded(player)
			
			if needsUpdate then
				self:updateState()
				idleCounter = 0 -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
			else
				idleCounter = idleCounter + 1
				
				-- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è (5+ —Å–µ–∫—É–Ω–¥)
				if idleCounter > 50 then -- 50 * 0.1 = 5 —Å–µ–∫—É–Ω–¥
					wait(0.3) -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è
				end
			end
		end
	end)
	
	self.updateConnection = true
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function AbilityPanel:checkIfUpdateNeeded(player)
	-- –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	local activeEffects = self.abilityService:getActiveEffects(player)
	for abilityId, _ in pairs(activeEffects) do
		return true -- –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
	end
	
	-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤ –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	local baseAbilities = {"speed_boost", "shield_aura", "jump_boost"}
	for _, abilityId in ipairs(baseAbilities) do
		local isOnCooldown = self.abilityService:isAbilityUnavailableForUI(player, abilityId)
		local wasOnCooldown = self.previousCooldowns[abilityId]
		
		-- –í–ê–ñ–ù–û: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if wasOnCooldown == nil or wasOnCooldown ~= isOnCooldown then
			if wasOnCooldown ~= nil then -- –ù–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
				print("üîÑ checkIfUpdateNeeded: –°–æ—Å—Ç–æ—è–Ω–∏–µ", abilityId, "–∏–∑–º–µ–Ω–∏–ª–æ—Å—å:", wasOnCooldown, "‚Üí", isOnCooldown)
			end
			return true -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
		end
		
		if isOnCooldown then
			return true -- –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã
		end
	end
	
	-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	for _, ability in ipairs(self.state.abilities) do
		local isOnCooldown = self.abilityService:isAbilityUnavailableForUI(player, ability.id)
		local wasOnCooldown = self.previousCooldowns[ability.id]
		
		-- –í–ê–ñ–ù–û: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if wasOnCooldown == nil or wasOnCooldown ~= isOnCooldown then
			if wasOnCooldown ~= nil then -- –ù–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
				print("üîÑ checkIfUpdateNeeded: –°–æ—Å—Ç–æ—è–Ω–∏–µ", ability.id, "–∏–∑–º–µ–Ω–∏–ª–æ—Å—å:", wasOnCooldown, "‚Üí", isOnCooldown)
			end
			return true -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
		end
		
		if isOnCooldown then
			return true -- –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã
		end
	end
	
	return false -- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã
end

function AbilityPanel:updateState()
	local player = Players.LocalPlayer
	if not player then return end
	
	local cooldowns = {}
	local cooldownTimes = {}
	local effectTimes = {}
	local activeEffects = self.abilityService:getActiveEffects(player)
	
	-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–¥–∞–∂–µ –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
	local baseAbilities = {"speed_boost", "shield_aura", "jump_boost"}
	
	for _, abilityId in ipairs(baseAbilities) do
		local isOnCooldown = self.abilityService:isAbilityUnavailableForUI(player, abilityId)
		local wasOnCooldown = self.previousCooldowns[abilityId]
		
		cooldowns[abilityId] = isOnCooldown
		
		-- –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AbilityService
		if activeEffects[abilityId] then
			local config = self:getAbilityConfig(abilityId)
			if config then
				local effect = activeEffects[abilityId]
				local elapsed = tick() - effect.startTime
				local remaining = math.max(0, config.baseDuration - elapsed)
				effectTimes[abilityId] = remaining
			end
		end
		
		-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∫—É–ª–¥–∞—É–Ω (–±—ã–ª –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç)
		if wasOnCooldown == true and isOnCooldown == false then
			-- –ö—É–ª–¥–∞—É–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
			print("‚úÖ AbilityPanel: –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", abilityId, "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –û–±–Ω–æ–≤–ª—è–µ–º UI")
			print("üìä AbilityPanel: –î–µ—Ç–∞–ª–∏ -", abilityId, "wasOnCooldown:", wasOnCooldown, "isOnCooldown:", isOnCooldown)
		end
		
		if isOnCooldown then
			cooldownTimes[abilityId] = self.abilityService:getUITimeLeft(player, abilityId)
		end
	end
	
	-- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –±—É–¥—É—â–µ–º)
	for _, ability in ipairs(self.state.abilities) do
		local isOnCooldown = self.abilityService:isAbilityUnavailableForUI(player, ability.id)
		local wasOnCooldown = self.previousCooldowns[ability.id]
		
		cooldowns[ability.id] = isOnCooldown
		
		-- –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞
		if activeEffects[ability.id] then
			local config = self:getAbilityConfig(ability.id)
			if config then
				local effect = activeEffects[ability.id]
				local elapsed = tick() - effect.startTime
				local remaining = math.max(0, config.baseDuration - elapsed)
				effectTimes[ability.id] = remaining
			end
		end
		
		-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞
		if wasOnCooldown == true and isOnCooldown == false then
			print("‚úÖ AbilityPanel: –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", ability.id, "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –û–±–Ω–æ–≤–ª—è–µ–º UI")
			print("üìä AbilityPanel: –î–µ—Ç–∞–ª–∏ -", ability.id, "wasOnCooldown:", wasOnCooldown, "isOnCooldown:", isOnCooldown)
		end
		
		if isOnCooldown then
			cooldownTimes[ability.id] = self.abilityService:getUITimeLeft(player, ability.id)
		end
	end
	
	-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	self.previousCooldowns = cooldowns
	
	-- –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	local changedAbilities = {}
	for abilityId, newState in pairs(cooldowns) do
		local oldState = self.state.cooldowns[abilityId]
		if oldState ~= newState then
			table.insert(changedAbilities, string.format("%s: %s‚Üí%s", abilityId, tostring(oldState), tostring(newState)))
		end
	end
	
	if #changedAbilities > 0 then
		print("üîÑ AbilityPanel updateState: –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:", table.concat(changedAbilities, ", "))
	end
	
	self:setState({
		cooldowns = cooldowns,
		activeEffects = activeEffects,
		cooldownTimes = cooldownTimes,
		effectTimes = effectTimes,
	})
end

function AbilityPanel:activateAbilityByIndex(index: number)
	local abilities = self.state.abilities
	if abilities[index] then
		self:onAbilityActivate(abilities[index].id)
	end
end

function AbilityPanel:onAbilityActivate(abilityId: string)
	local player = Players.LocalPlayer
	if not player then return end
	
	local result = self.abilityService:activateAbility(player, abilityId)
	
	-- –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
	local buttonRef = self.buttonRefs[abilityId]
	local button = buttonRef and buttonRef:getValue()
	
	if result.success then
		-- –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
		if button then
			self:animateSuccess(button)
		end
		
		-- –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		spawn(function()
			wait(0.1)
			self:updateState()
		end)
	else
		-- –ù–µ—É–¥–∞—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –∑–≤—É–∫
		if button then
			-- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é –æ—à–∏–±–∫–∏, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ –Ω–µ—ë
		end
		
		-- –ù–µ—É–¥–∞—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫—É–ª–¥–∞—É–Ω–∞
		if self.soundService then
			self.soundService:playAbilityCooldown()
		end
		
		-- –ö—Ä–∞—Ç–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if result.message:find("–Ω–µ—Ç —ç—Ç–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏") then
			game.StarterGui:SetCore("SendNotification", {
				Title = "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞!",
				Text = "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
				Duration = 3,
			})
		elseif result.message:find("–∫—É–ª–¥–∞—É–Ω–µ") then
			local timeLeft = math.ceil(self.abilityService:getCooldownTimeLeft(player, abilityId))
			game.StarterGui:SetCore("SendNotification", {
				Title = "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ!",
				Text = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ " .. timeLeft .. " —Å–µ–∫",
				Duration = 2,
			})
		end
	end
	
	-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	self:updateState()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover –¥–ª—è –∫–Ω–æ–ø–æ–∫
function AbilityPanel:animateHover(button: GuiObject)
	if not button then return end
	
	local tween = TweenService:Create(button, 
		TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Size = UDim2.new(0, 68, 0, 68)} -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 64 –¥–æ 68
	)
	tween:Play()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
function AbilityPanel:animateRelease(button: GuiObject)
	if not button then return end
	
	local tween = TweenService:Create(button, 
		TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Size = UDim2.new(0, 64, 0, 64)} -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 64
	)
	tween:Play()
end

-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
function AbilityPanel:animateSuccess(button: GuiObject)
	if not button then return end
	
	local originalColor = button.BackgroundColor3
	
	-- –ó–µ–ª–µ–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ
	local tween1 = TweenService:Create(button, 
		TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{BackgroundColor3 = Color3.fromRGB(0, 255, 100)}
	)
	
	tween1.Completed:Connect(function()
		local tween2 = TweenService:Create(button, 
			TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{BackgroundColor3 = originalColor}
		)
		tween2:Play()
	end)
	
	tween1:Play()
end

-- –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ –∫—É–ª–¥–∞—É–Ω–∞
function AbilityPanel:createProgressBar(abilityId: string, isEffectBar: boolean)
	local isActive = self.state.activeEffects[abilityId] ~= nil
	local isOnCooldown = self.state.cooldowns[abilityId] or false
	local effectTime = self.state.effectTimes[abilityId] or 0
	local cooldownTime = self.state.cooldownTimes[abilityId] or 0
	
	-- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	local shouldShow = false
	local progress = 0
	local barColor = Color3.fromRGB(76, 175, 80) -- –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	
	if isEffectBar and isActive and effectTime > 0 then
		-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ (–∑–µ–ª–µ–Ω—ã–π) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
		local config = self:getAbilityConfig(abilityId)
		if config then
			progress = math.max(0, math.min(1, effectTime / config.baseDuration))
			barColor = Color3.fromRGB(76, 175, 80) -- –ó–µ–ª–µ–Ω—ã–π
			shouldShow = true
		end
	elseif not isEffectBar and not isActive and isOnCooldown and cooldownTime > 0 then
		-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∫—É–ª–¥–∞—É–Ω–∞ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ù–ï –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
		local config = self:getAbilityConfig(abilityId)
		if config then
			progress = math.max(0, math.min(1, cooldownTime / config.cooldown))
			barColor = Color3.fromRGB(255, 152, 0) -- –û—Ä–∞–Ω–∂–µ–≤—ã–π
			shouldShow = true
		end
	end
	
	if not shouldShow then
		return nil
	end
	
	-- –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ref –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
	local refKey = abilityId .. (isEffectBar and "_effect" or "_cooldown")
	if not self.progressRefs[refKey] then
		self.progressRefs[refKey] = Roact.createRef()
	end
	
	return Roact.createElement("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.new(0.9, 0, 0.12, 0),
		Position = UDim2.new(0.05, 0, 0.82, 0),
		ZIndex = 6,
	}, {
		-- –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
		Background = Roact.createElement("Frame", {
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BackgroundTransparency = 0.3,
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(0, 0, 0, 0),
		}, {
			Corner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 2),
			}),
		}),
		
		-- –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
		Fill = Roact.createElement("Frame", {
			[Roact.Ref] = self.progressRefs[refKey],
			BackgroundColor3 = barColor,
			BackgroundTransparency = 0.2,
			BorderSizePixel = 0,
			Size = UDim2.new(progress, 0, 1, 0),
			Position = UDim2.new(0, 0, 0, 0),
			ZIndex = 7,
			[Roact.Event.Changed] = function(property)
				-- –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
				if property == "Size" then
					local fillFrame = self.progressRefs[refKey]:getValue()
					if fillFrame then
						local tween = TweenService:Create(fillFrame,
							TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
							{Size = UDim2.new(progress, 0, 1, 0)}
						)
						tween:Play()
					end
				end
			end,
		}, {
			Corner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 2),
			}),
		}),
	})
end

-- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è createProButton
function AbilityPanel:createSimpleButton(ability, index: number)
	local isOnCooldown = self.state.cooldowns[ability.id]
	local isActive = self.state.activeEffects[ability.id] ~= nil
	local cooldownTime = self.state.cooldownTimes[ability.id] or 0
	
	-- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
	local abilityConfig = {
		speed_boost = { icon = "‚ö°", color = Color3.fromRGB(0, 174, 255) },
		shield_aura = { icon = "üõ°", color = Color3.fromRGB(255, 149, 0) },
		jump_boost = { icon = "üöÄ", color = Color3.fromRGB(52, 199, 89) },
	}
	
	local config = abilityConfig[ability.id] or {
		icon = "?", color = Color3.fromRGB(100, 100, 255)
	}
	
	-- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –¶–í–ï–¢–û–í –ò –°–û–°–¢–û–Ø–ù–ò–ô
	local buttonColor, transparency, strokeColor, strokeThickness
	
	if isActive then
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ê–ö–¢–ò–í–ù–ê (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å) - —è—Ä–∫–∏–π —Å–≤–µ—Ç—è—â–∏–π—Å—è —Ü–≤–µ—Ç
		buttonColor = Color3.new(
			math.min(1, config.color.R * 1.5), 
			math.min(1, config.color.G * 1.5), 
			math.min(1, config.color.B * 1.5)
		)
		transparency = 0 -- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(255, 255, 255) -- –ë–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 2
	elseif isOnCooldown then
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –ö–£–õ–î–ê–£–ù–ï - —Ç–µ–º–Ω–∞—è, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
		buttonColor = Color3.fromRGB(60, 30, 30) -- –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–∞—è
		transparency = 0.3 -- –°–ª–µ–≥–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(120, 60, 60) -- –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 1
	else
		-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ - –æ–±—ã—á–Ω—ã–π —è—Ä–∫–∏–π —Ü–≤–µ—Ç
		buttonColor = config.color
		transparency = 0 -- –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
		strokeColor = Color3.fromRGB(80, 80, 80) -- –°–µ—Ä–∞—è –æ–±–≤–æ–¥–∫–∞
		strokeThickness = 1
	end
	
	-- –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò
	local hotkey = ""
	if ability.id == "speed_boost" then hotkey = "Q"
	elseif ability.id == "shield_aura" then hotkey = "E" 
	elseif ability.id == "jump_boost" then hotkey = "R" end
	
	-- –°–æ–∑–¥–∞–µ–º ref –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
	if not self.buttonRefs[ability.id] then
		self.buttonRefs[ability.id] = Roact.createRef()
	end
	
	-- üì± –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï
	local isMobile = self.platformService:isMobile()
	local position
	if isMobile then
		-- –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è)
		position = UDim2.new(0, 0, 0, (index - 1) * 72)
	else
		-- –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è)
		position = UDim2.new(0, (index - 1) * 72, 0, 0)
	end
	
	-- –û–ë–´–ß–ù–ê–Ø –ö–ù–û–ü–ö–ê –° –ü–†–û–°–¢–´–ú–ò –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò (–ë–ï–ó –õ–ò–®–ù–ï–ì–û FRAME)
	return Roact.createElement("TextButton", {
		[Roact.Ref] = self.buttonRefs[ability.id],
		BackgroundColor3 = buttonColor,
		BackgroundTransparency = transparency,
		BorderSizePixel = 0,
		Size = UDim2.new(0, 64, 0, 64),
		Position = position,
		Text = "",
		AutoButtonColor = false,
		Modal = true, -- –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–≤—É–∫–∏ Roblox
		[Roact.Event.Activated] = function()
			-- –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º onAbilityActivate - –∑–≤—É–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
			self:onAbilityActivate(ability.id)
		end,
		[Roact.Event.MouseEnter] = function()
			-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover
			local button = self.buttonRefs[ability.id]:getValue()
			if button then
				self:animateHover(button)
			end
		end,
		[Roact.Event.MouseLeave] = function()
			-- –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
			local button = self.buttonRefs[ability.id]:getValue()
			if button then
				self:animateRelease(button)
			end
		end,
	}, {
		-- –°–ö–†–£–ì–õ–ï–ù–ò–ï
		Corner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, 12),
		}),
		
		-- –û–ë–í–û–î–ö–ê –î–õ–Ø –ò–ù–î–ò–ö–ê–¶–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø
		Stroke = Roact.createElement("UIStroke", {
			Color = strokeColor,
			Thickness = strokeThickness,
			Transparency = 0.3,
		}),
		
		-- –ò–ö–û–ù–ö–ê –°–ü–û–°–û–ë–ù–û–°–¢–ò (–ò–î–ï–ê–õ–¨–ù–û–ï –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï)
		Icon = Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.7, 0, 0.7, 0), -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
			Position = UDim2.new(0.15, 0, 0.08, 0), -- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
			AnchorPoint = Vector2.new(0, 0), -- –Ø–∫–æ—Ä—å –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
			Text = config.icon,
			TextColor3 = isOnCooldown and Color3.fromRGB(150, 150, 150) or Color3.fromRGB(255, 255, 255),
			TextTransparency = isOnCooldown and 0.5 or 0,
			TextScaled = true,
			TextXAlignment = Enum.TextXAlignment.Center, -- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
			TextYAlignment = Enum.TextYAlignment.Center, -- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
			Font = Enum.Font.GothamBold,
		}),
		
		-- –ì–û–†–Ø–ß–ê–Ø –ö–õ–ê–í–ò–®–ê (–ü–†–ê–í–´–ô –í–ï–†–•–ù–ò–ô –£–ì–û–õ)
		Hotkey = Roact.createElement("TextLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0.25, 0, 0.22, 0), -- –°–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
			Position = UDim2.new(0.72, 0, 0.03, 0), -- –°–¥–≤–∏–≥–∞–µ–º —á—É—Ç—å –ø—Ä–∞–≤–µ–µ –∏ –≤—ã—à–µ
			Text = hotkey,
			TextColor3 = isOnCooldown and Color3.fromRGB(150, 150, 150) or Color3.fromRGB(255, 255, 255),
			TextTransparency = isOnCooldown and 0.5 or 0,
			TextSize = 11, -- –°–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
			TextXAlignment = Enum.TextXAlignment.Center,
			TextYAlignment = Enum.TextYAlignment.Center,
			Font = Enum.Font.GothamBold,
		}),
		
		-- –ü–†–û–ì–†–ï–°–°-–ë–ê–† –≠–§–§–ï–ö–¢–ê (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞)
		EffectProgress = self:createProgressBar(ability.id, true),
		
		-- –ü–†–û–ì–†–ï–°–°-–ë–ê–† –ö–£–õ–î–ê–£–ù–ê (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ)
		CooldownProgress = self:createProgressBar(ability.id, false),
	})
end

-- –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function AbilityPanel:createEmptySlot(slot, index: number)
	local hotkey = slot.hotkey or "?"
	
	-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (–¥–∞–∂–µ –¥–ª—è –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π)
	local isOnCooldown = self.state.cooldowns[slot.abilityId] or false
	local cooldownTime = self.state.cooldownTimes[slot.abilityId] or 0
	
	-- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
	local backgroundColor, strokeColor, strokeThickness
	
	if isOnCooldown then
		-- –ù–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–æ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ)
		backgroundColor = Color3.fromRGB(80, 40, 40)
		strokeColor = Color3.fromRGB(120, 60, 60)
		strokeThickness = 2
	else
		-- –û–±—ã—á–Ω—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç (–Ω–µ –∫—É–ø–ª–µ–Ω–∞)
		backgroundColor = Color3.fromRGB(40, 40, 40)
		strokeColor = Color3.fromRGB(80, 80, 80)
		strokeThickness = 1
	end
	
	-- –°–æ–∑–¥–∞–µ–º ref –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
	if not self.buttonRefs[slot.abilityId] then
		self.buttonRefs[slot.abilityId] = Roact.createRef()
	end
	
	-- üì± –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï
	local isMobile = self.platformService:isMobile()
	local position
	if isMobile then
		-- –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è)
		position = UDim2.new(0, 0, 0, (index - 1) * 72)
	else
		-- –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è)
		position = UDim2.new(0, (index - 1) * 72, 0, 0)
	end
	
	return Roact.createElement("TextButton", {
		[Roact.Ref] = self.buttonRefs[slot.abilityId],
		BackgroundColor3 = backgroundColor,
		BackgroundTransparency = 0.2, -- –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
		BorderSizePixel = 0,
		Size = UDim2.new(0, 64, 0, 64),
		Position = position,
		Text = "", -- –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
		AutoButtonColor = false,
		Modal = true, -- –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–≤—É–∫–∏ Roblox
		[Roact.Event.Activated] = function()
			-- –í—ã–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é - –∑–≤—É–∫ –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
			self:onAbilityActivate(slot.abilityId)
		end,
		[Roact.Event.MouseEnter] = function()
			-- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è hover –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
			local button = self.buttonRefs[slot.abilityId]:getValue()
			if button then
				self:animateHover(button)
			end
		end,
		[Roact.Event.MouseLeave] = function()
			local button = self.buttonRefs[slot.abilityId]:getValue()
			if button then
				self:animateRelease(button)
			end
		end,
	}, {
		-- –°–∫—Ä—É–≥–ª–µ–Ω–∏—è
		Corner = Roact.createElement("UICorner", {
			CornerRadius = UDim.new(0, 12),
		}),
		
		-- –û–±–≤–æ–¥–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
		Stroke = Roact.createElement("UIStroke", {
			Color = strokeColor,
			Thickness = strokeThickness,
			Transparency = 0.5,
		}),
		
		-- –ò–ö–û–ù–ö–ê –°–ü–û–°–û–ë–ù–û–°–¢–ò (–ò–î–ï–ê–õ–¨–ù–û–ï –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï)
		Icon = Roact.createElement("TextLabel", {
			Text = slot.icon,
			TextColor3 = Color3.fromRGB(150, 150, 150),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.7, 0, 0.7, 0), -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
			Position = UDim2.new(0.15, 0, 0.08, 0), -- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
			AnchorPoint = Vector2.new(0, 0), -- –Ø–∫–æ—Ä—å –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
			TextScaled = true,
			TextXAlignment = Enum.TextXAlignment.Center, -- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
			TextYAlignment = Enum.TextYAlignment.Center, -- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
		}),
		
		-- –ì–û–†–Ø–ß–ê–Ø –ö–õ–ê–í–ò–®–ê (–ü–†–ê–í–´–ô –í–ï–†–•–ù–ò–ô –£–ì–û–õ)
		Hotkey = Roact.createElement("TextLabel", {
			Text = hotkey,
			TextColor3 = Color3.fromRGB(150, 150, 150),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.25, 0, 0.22, 0), -- –°–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
			Position = UDim2.new(0.72, 0, 0.03, 0), -- –°–¥–≤–∏–≥–∞–µ–º —á—É—Ç—å –ø—Ä–∞–≤–µ–µ –∏ –≤—ã—à–µ
			TextSize = 11, -- –°–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
			TextXAlignment = Enum.TextXAlignment.Center,
			TextYAlignment = Enum.TextYAlignment.Center,
		}),
		
		-- –ó–∞–º–æ–∫ (–µ—Å–ª–∏ –Ω–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ)
		LockIcon = not isOnCooldown and Roact.createElement("TextLabel", {
			Text = "üîí",
			TextColor3 = Color3.fromRGB(120, 120, 120),
			Font = Enum.Font.GothamBold,
			BackgroundTransparency = 1,
			Size = UDim2.new(0.3, 0, 0.3, 0),
			Position = UDim2.new(0.35, 0, 0.6, 0),
			TextScaled = true,
		}) or nil,
	})
end

-- –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
function AbilityPanel:didUpdate(prevProps)
	if self.props.updateTrigger and prevProps.updateTrigger ~= self.props.updateTrigger then
		-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
		spawn(function()
			wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
			self:loadAbilities()
			print("AbilityPanel: –û–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
		end)
	end
end

function AbilityPanel:render()
	local abilities = self.state.abilities
	
	-- –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —Å–ª–æ—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (Q, E, R)
	local baseAbilitySlots = {
		{hotkey = "Q", abilityId = "speed_boost", icon = "‚ö°", name = "–£—Å–∫–æ—Ä–µ–Ω–∏–µ"},
		{hotkey = "E", abilityId = "shield_aura", icon = "üõ°", name = "–©–∏—Ç"},
		{hotkey = "R", abilityId = "jump_boost", icon = "üöÄ", name = "–ü—Ä—ã–∂–æ–∫"},
	}
	
	-- üì± –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø
	local isMobile = self.platformService:isMobile()
	
	local buttonSize = 64
	local spacing = 72  -- –û–±—â–∏–π spacing (64 —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ + 8 –æ—Ç—Å—Ç—É–ø)
	
	-- –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ, –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ
	local totalWidth, totalHeight
	if isMobile then
		-- –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
		totalWidth = buttonSize
		totalHeight = (#baseAbilitySlots - 1) * spacing + buttonSize
	else
		-- –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞
		totalWidth = (#baseAbilitySlots - 1) * spacing + buttonSize
		totalHeight = buttonSize
	end
	
	local abilityButtons = {}
	for i, slot in ipairs(baseAbilitySlots) do
		-- –ò—â–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
		local ownedAbility = nil
		for _, ability in ipairs(abilities) do
			if ability.id == slot.abilityId then
				ownedAbility = ability
				break
			end
		end
		
		if ownedAbility then
			-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫—É–ø–ª–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
			abilityButtons["Ability" .. i] = self:createSimpleButton(ownedAbility, i)
		else
			-- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
			abilityButtons["Ability" .. i] = self:createEmptySlot(slot, i)
		end
	end
	
	return Roact.createElement("ScreenGui", {
		Name = "AbilityPanel",
		ResetOnSpawn = false,
	}, {
		-- –û–ë–´–ß–ù–ê–Ø –ü–ê–ù–ï–õ–¨ (–ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ò)
		MainBar = Roact.createElement("Frame", {
			BackgroundColor3 = Color3.fromRGB(28, 28, 30), -- –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π Apple style
			BackgroundTransparency = 0.05, -- –ü–æ—á—Ç–∏ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
			BorderSizePixel = 0,
			Size = UDim2.new(0, totalWidth + 16, 0, totalHeight + 16),
			Position = isMobile and 
				UDim2.new(1, -(totalWidth + 16 + 20), 0.3, -(totalHeight + 16) / 2) or -- –ú–æ–±–∏–ª—å–Ω–∞—è: –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π, –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
				UDim2.new(0.5, -(totalWidth + 16) / 2, 1, -totalHeight - 32), -- –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è: —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
		}, {
			-- –°–û–í–†–ï–ú–ï–ù–ù–û–ï –°–ö–†–£–ì–õ–ï–ù–ò–ï
			Corner = Roact.createElement("UICorner", {
				CornerRadius = UDim.new(0, 16),
			}),
			
			-- –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ù–¨ –ü–ê–ù–ï–õ–ò
			Shadow = Roact.createElement("Frame", {
				BackgroundColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 0.8,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 6, 1, 6),
				Position = UDim2.new(0, -3, 0, 3),
				ZIndex = -1,
			}, {
				Corner = Roact.createElement("UICorner", {
					CornerRadius = UDim.new(0, 19),
				}),
			}),
			
			-- –°–¢–ò–õ–¨–ù–ê–Ø –†–ê–ú–ö–ê –ö–ê–ö –£ –ú–ê–ì–ê–ó–ò–ù–ê (–ò–ó SHOPCONFIG)
			Border = Roact.createElement("UIStroke", {
				Color = ShopConfig.design.colors.accent.primary, -- –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç –∏–∑ ShopConfig
				Thickness = ShopConfig.design.stroke.thickness, -- –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞
				Transparency = 0.3, -- –ú–µ–Ω–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
			}),
			
			-- –ö–û–ù–¢–ï–ô–ù–ï–† –ö–ù–û–ü–û–ö
			ButtonContainer = Roact.createElement("Frame", {
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -16, 1, -16),
				Position = UDim2.new(0, 8, 0, 8),
			}, abilityButtons),
		}),
	})
end

-- –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–∑ AbilityConfig
function AbilityPanel:getAbilityConfig(abilityId: string)
	local allAbilities = AbilityConfig.getAllAbilities()
	for _, config in ipairs(allAbilities) do
		if config.id == abilityId then
			return config
		end
	end
	return nil
end

function AbilityPanel:willUnmount()
	-- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	self.updateConnection = false
	
	-- –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Heartbeat (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
	if self.heartbeatConnection then
		self.heartbeatConnection:Disconnect()
		self.heartbeatConnection = nil
	end
end

return AbilityPanel
